datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URI")
}

generator client {
  provider = "prisma-client-js"
}

enum Day {
  SUN
  MON
  TUE
  WED
  THU
  FRI
  SAT
}

enum UserRole {
  ADMIN
  USER
  AGENT
  SHOPKEEPER
  HELPER
}

model Password {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  hash         String
  passwordText String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String @unique @db.ObjectId
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  email       String       @unique
  name        String
  phone       String?
  mobile      String?
  password    Password?
  approved    Boolean      @default(true)
  role        UserRole     @default(USER)
  shop        Shop?
  tokens      Token?
  allocatShop AllocatShop?
  tokenLogs   TokenLogs?
  created_at  DateTime?
}

model AllocatShop {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId
}

model Shop {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String          @unique @db.ObjectId
  name           String
  location       String
  tokens         Token?
  shopUser       AllocatShop?
}

model Token {
  id                   String      @id @default(auto()) @map("_id") @db.ObjectId
  shop                 Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId               String      @unique @db.ObjectId
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String      @unique @db.ObjectId
  cnic                 String?
  name                 String?
  surName              String?
  dateOfBirth          String?
  issueCnic            String?
  expiryCnic           String?
  phoneNumber          String?
  address              String?
  tokenNumber          String
  tokenNumberInt       Int
  getCommission        String?
  agentCommission      String?
  status               TokenStatus @default(ACTIVE)
  isResvered           Boolean     @default(false)
  isSendRequestForHigh Boolean     @default(false)
  tokenLogs            TokenLogs[]
  created_at           DateTime
}

enum TokenStatus {
  ACTIVE
  HIGH_PRIORITY
  COMPLETE
  NEED_BASE
  FRIEND_FAMILY
  LOW_PRIORITY
}

model TokenLogs {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String      @unique @db.ObjectId
  token      Token       @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  tokenId    String      @unique @db.ObjectId
  status     TokenStatus @default(ACTIVE)
  date_at    String
  time_at    String
  created_at DateTime
}
